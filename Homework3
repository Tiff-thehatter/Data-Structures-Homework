"""

Group 36
Micaela Arleo-Gil (U95656807)
Tiffany Whitsett (U90321785)

"""

"""
    Write your main code for each question in the specified functions
    as they will be used for unit testing. You can define other functions
    to modularize your code but remember that the following functions are the
    ones that are called by our tester.

    ** Do not change the name of the file to anything else.
"""

def question1(nums):
    """
        Given an integer array, return true if any value appears at least twice in the array and false if every element is distinct.
    """
    repeat = True
    while not 1 <= len(nums) <= 10 ** 5:
        while -10 ** 9 <= nums[i] <= 10 ** 9:
            break
        return ("not within constraints")
    for i in range(len(nums)-1):

        nums.sort()
        if nums[i] == nums[i+1]:
            return repeat


    return not repeat


def question2(nums):
    """
    Given an integer array of numbers, return the minimum number of moves required to make all array elements equal.   In one move, you can increment or decrement an element of the array by 1.

    Test cases are designed so that the  answer will fit in a 32-bit integer.
    """
    nums.sort()
    median = nums[len(nums) // 2]
    value = sum(abs(num - median) for num in nums)
    return value


def question3(nums):
    """
    Given an integer array, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.

    Return the length of shortest such subarray.
    """
    n = len(nums)
    l = 0
    r = n - 1

    while l < n - 1 and nums[l] <= nums[l + 1]:
        l += 1
    if l == n - 1:
        return 0

    while r > 0 and nums[r] >= nums[r - 1]:
        r -= 1

    sub_min, sub_max = min(nums[l:r + 1]), max(nums[l:r + 1])

    while l > 0 and nums[l - 1] > sub_min:
        l -= 1
    while r < n - 1 and nums[r + 1] < sub_max:
        r += 1

    return r - l + 1

def ec(peoples, limit):
    """
    You are given an array people where people[i] is the weight of the  person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit. Return the minimum number of boats to carry all the people.
    """

    peoples.sort()

    boats = 0
    w_of_light = 0
    w_of_heavy = len(peoples) - 1

    while w_of_light <= w_of_heavy:
        if peoples[w_of_light] + peoples[w_of_heavy] <= limit:
            w_of_light += 1
        
        w_of_heavy -= 1
        boats += 1

    return boats
        
